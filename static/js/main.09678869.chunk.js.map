{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","pages/home/home-reducer.js","pages/home/home-constant.js","pages/search/search-reducer.js","pages/search/search-contant.js","main-reducer.js","pages/common/components/header.js","pages/common/header-action.js","pages/common/header-constant.js","pages/common/header-container.js","pages/common/components/footer.js","pages/app/components/app.js","pages/app/app-action.js","index.js","pages/app/app-container.js"],"names":["module","exports","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","initialState","loginSuccess","HomeReducer","state","action","type","error","SearchReducer","data","combineReducer","combineReducers","home","Search","rootReducer","undefined","HeaderComponent","this","props","onClick","logout","PureComponent","connect","currentProps","FooterComponent","AppComponent","children","addNumData","ActionTypes","navToHomePage","alert","store","createStore","mainReducer","applyMiddleware","thunk","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,mZCyB5BC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBChBAC,EAAe,CACjBC,cAAa,GAsBFC,EAjBK,WAAqC,IAApCC,EAAmC,sEAAzBH,GAAcI,EAAW,uCACpD,OAAOA,EAAOC,MACV,ICTsB,iBDUlB,kCACOF,GADP,IAEIG,MAAM,qCAEb,ICbwB,oBDcrB,kCACOH,GADP,IAEIF,cAAa,IAErB,QACI,OAAOE,IEnBbH,EAAe,CACjBC,cAAa,GA8BFM,EAvBO,WAAqC,IAApCJ,EAAmC,sEAAzBH,GAAcI,EAAW,uCACtD,OAAOA,EAAOC,MACV,ICZuB,kBDanB,kCACOF,GADP,IAEGK,KAAKJ,EAAOI,OAElB,IChBkB,cDiBf,kCACOL,GADP,IAEGK,KAAK,KACLP,cAAa,IAEpB,ICpByB,oBDqBrB,kCACOE,GADP,IAEIF,cAAa,IAErB,QACI,OAAOE,IExBbM,EAAiBC,YAAgB,CACrCC,OACAC,WASaC,EANK,SAACV,EAAMC,GAIvB,MAHiB,oBAAdA,EAAOC,OACNF,OAAQW,GAELL,EAAeN,EAAMC,I,0DCSjBW,E,uKAlBF,IAAD,OACJ,OACI,6BACA,gCACA,yBAAK3B,UAAU,eACV4B,KAAKC,MAAMhB,cACZ,yBAAKb,UAAU,SAAS8B,QAAS,kBAAI,EAAKD,MAAME,WAAhD,iB,GARcC,iBCDjBD,EAAS,WAClB,MAAM,CACFd,KCJmB,gBCaZgB,eAPS,SAAClB,EAAOmB,GAE5B,MAAM,CACFrB,aAFiBE,EAAMQ,MAAQR,EAAMQ,KAAKV,gBAMXG,EAAxBiB,CAAgCN,GCIhCQ,E,uKAXP,OACI,6BACI,4BAAQnC,UAAU,oCAClB,yBAAKA,UAAU,qCAAf,wB,GANcgC,iBCgBfI,E,uKAVP,OACI,6BACI,kBAAC,EAAD,MACCR,KAAKC,MAAMQ,SACZ,kBAAC,EAAD,W,GARWL,iB,QCHdM,EAAa,WACtB,MAAM,CACFrB,KAAKsB,mBAGAC,EAAgB,WACzBC,MAAM,SCQNC,GCHWT,aAPS,SAAClB,EAAOmB,GAE5B,MAAM,KAK6BlB,EAAxBiB,CAAgCG,GDGnCO,YACVC,EACAC,YAAgBC,OAGZC,EAAO,kBACX,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAIJM,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SbsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAM0C,c","file":"static/js/main.09678869.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as ActionType from './home-constant';\n\nconst initialState = {\n    loginSuccess:false\n}\n\n\n\nconst HomeReducer = (state={...initialState},action) => {\n    switch(action.type){\n        case ActionType.NAV_LOGIN_FAIL:\n            return{\n                ...state,\n                error:'Login Failed Please try again...'\n            }\n         case ActionType.NAV_LOGIN_SUCCESS:\n            return{\n                ...state,\n                loginSuccess:true\n            }   \n        default:\n            return state;\n    }\n\n};\nexport default HomeReducer;","export const NAV_TO_LOGIN = 'NAV_TO_LOGIN';\nexport const NAV_LOGIN_FAIL = 'NAV_LOGIN_FAIL';\nexport const NAV_LOGIN_SUCCESS = 'NAV_LOGIN_SUCCESS';","import * as ActionType from './search-contant';\n\nconst initialState = {\n    loginSuccess:false\n}\n\nconst getLoginCheck = (data) =>{\n    console.log(data);\n}\n\nconst SearchReducer = (state={...initialState},action) => {\n    switch(action.type){\n        case ActionType.NAV_PLANET_LIST:\n            return{\n                ...state,\n               data:action.data,\n            }\n         case ActionType.NAV_TO_HOME:\n            return{\n                ...state,\n               data:null,\n               loginSuccess:false\n            }\n        case ActionType.NAV_LOGIN_SUCCESS:\n            return{\n                ...state,\n                loginSuccess:true\n            } \n        default:\n            return state;\n    }\n\n};\nexport default SearchReducer;","export const NAV_PLANET_LIST = 'NAV_PLANET_LIST';\nexport const NAV_TO_HOME = 'NAV_TO_HOME';\nexport const NAV_TO_CHECKLOGIN = 'NAV_TO_CHECKLOGIN';\nexport const NAV_LOGIN_SUCCESS = 'NAV_LOGIN_SUCCESS';","import { combineReducers } from 'redux';\n\nimport home from './pages/home/home-reducer';\nimport Search from './pages/search/search-reducer';\n\nconst combineReducer = combineReducers({\n  home,\n  Search\n});\n\nconst rootReducer = (state,action) => {\n    if(action.type==='RESET_APP_STORE'){\n        state = undefined;\n    }\n    return combineReducer(state,action);\n}\nexport default rootReducer;","import React,{PureComponent} from 'react';\n\n\nclass HeaderComponent extends PureComponent{\n\n    render(){\n        return(\n            <div>\n            <header>\n            <nav className=\"navbar-dark\">\n                {this.props.loginSuccess &&\n                <div className=\"logout\" onClick={()=>this.props.logout()}>\n                    Logout\n                </div>\n                }\n            </nav>\n\n            </header>\n            </div>\n        )\n    }\n}\n\nexport default HeaderComponent;","import * as ActionTypes from './header-constant';\n\nexport const logout = () =>{\n    return{\n        type:ActionTypes.NAV_TO_HOME\n    }\n}","export const NAV_TO_HOME = 'NAV_TO_HOME';","import {connect} from 'react-redux';\n\nimport HeaderComponent from './components/header';\nimport * as action from './header-action';\n\n\nconst mapStateToProps = (state, currentProps) => {\n    const loginSuccess = state.home && state.home.loginSuccess\n    return{\n        loginSuccess\n    }\n}\n\nexport default connect(mapStateToProps,action)(HeaderComponent);","import React,{PureComponent} from 'react';\n\n\nclass FooterComponent extends PureComponent{\n    \n    render(){\n        return(\n            <div>\n                <footer className=\"page-footer font-small blue pt-4\">\n                <div className=\"footer-copyright text-center py-1\">©Copyright:\n                </div>\n                </footer>\n            </div>\n        )\n    }\n}\n\nexport default FooterComponent;","import React,{PureComponent} from 'react';\nimport Header from '../../common/header-container';\nimport Footer from '../../common/components/footer'\n\n\nclass AppComponent extends PureComponent{\n\n    \n    render(){\n        return(\n            <div>\n                <Header />\n                {this.props.children}\n                <Footer/>\n            </div>\n        )\n    }\n}\n\nexport default AppComponent;","import * as ActionTypes from './app-constant';\n\nexport const addNumData = () => {\n    return{\n        type:ActionTypes.NAV_TO_SUPPORT\n    }\n}\nexport const navToHomePage = () =>{\n    alert('home')\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport { Switch, Route } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport {createStore,applyMiddleware} from 'redux';\nimport mainReducer from './main-reducer';\nimport appRoutes from './main-router';\nimport thunk from 'redux-thunk';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.css';\nimport Layout from '../src/pages/app/app-container';\n\nlet store = createStore(\n  mainReducer,\n  applyMiddleware(thunk)\n);\n\nconst Root = () => (\n  <Provider store={store} >\n    <App/>\n  </Provider>\n);\n\nReactDOM.render(\n  <Root/>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {connect} from 'react-redux';\n\nimport AppComponent from './components/app';\nimport * as action from './app-action';\n\n\nconst mapStateToProps = (state, currentProps) => {\n   // const language = state.HomeReducer.language;\n    return{\n      //  language\n    }\n}\n\nexport default connect(mapStateToProps,action)(AppComponent);"],"sourceRoot":""}